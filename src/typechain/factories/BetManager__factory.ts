/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type { BetManager, BetManagerInterface } from "../BetManager";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "marketId",
        type: "uint256",
      },
      {
        internalType: "int256[]",
        name: "binIndices",
        type: "int256[]",
      },
      {
        internalType: "uint256[]",
        name: "amounts",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "maxCollateral",
        type: "uint256",
      },
    ],
    name: "buyTokens",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "marketId",
        type: "uint256",
      },
      {
        internalType: "int256",
        name: "binIndex",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "calculateBinCost",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "marketId",
        type: "uint256",
      },
      {
        internalType: "int256",
        name: "binIndex",
        type: "int256",
      },
    ],
    name: "claimReward",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "collateralToken",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "marketId",
        type: "uint256",
      },
      {
        internalType: "int256",
        name: "binIndex",
        type: "int256",
      },
    ],
    name: "getBinQuantity",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "marketId",
        type: "uint256",
      },
      {
        internalType: "int256",
        name: "fromBinIndex",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "toBinIndex",
        type: "int256",
      },
    ],
    name: "getBinQuantitiesInRange",
    outputs: [
      {
        internalType: "int256[]",
        name: "binIndices",
        type: "int256[]",
      },
      {
        internalType: "uint256[]",
        name: "quantities",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "marketId",
        type: "uint256",
      },
    ],
    name: "getMarketInfo",
    outputs: [
      {
        internalType: "bool",
        name: "active",
        type: "bool",
      },
      {
        internalType: "bool",
        name: "closed",
        type: "bool",
      },
      {
        internalType: "uint256",
        name: "tickSpacing",
        type: "uint256",
      },
      {
        internalType: "int256",
        name: "minTick",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "maxTick",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "T",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "collateralBalance",
        type: "uint256",
      },
      {
        internalType: "int256",
        name: "winningBin",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "openTimestamp",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "closeTimestamp",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "marketCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "rangeBetToken",
    outputs: [
      {
        internalType: "contract RangeBetToken",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "marketId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "int256",
        name: "winningBin",
        type: "int256",
      },
    ],
    name: "MarketClosed",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "marketId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "tickSpacing",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "int256",
        name: "minTick",
        type: "int256",
      },
      {
        indexed: false,
        internalType: "int256",
        name: "maxTick",
        type: "int256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "openTimestamp",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "closeTimestamp",
        type: "uint256",
      },
    ],
    name: "MarketCreated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "marketId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "claimer",
        type: "address",
      },
      {
        indexed: false,
        internalType: "int256",
        name: "binIndex",
        type: "int256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "RewardClaimed",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "marketId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "buyer",
        type: "address",
      },
      {
        indexed: false,
        internalType: "int256[]",
        name: "binIndices",
        type: "int256[]",
      },
      {
        indexed: false,
        internalType: "uint256[]",
        name: "amounts",
        type: "uint256[]",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "totalCost",
        type: "uint256",
      },
    ],
    name: "TokensBought",
    type: "event",
  },
] as const;

export class BetManager__factory {
  static readonly abi = _abi;
  static createInterface(): BetManagerInterface {
    return new Interface(_abi) as BetManagerInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): BetManager {
    return new Contract(address, _abi, runner) as unknown as BetManager;
  }
}
