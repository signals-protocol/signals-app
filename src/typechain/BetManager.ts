/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface BetManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "buyTokens"
      | "calculateBinCost"
      | "claimReward"
      | "collateralToken"
      | "getBinQuantity"
      | "getBinQuantitiesInRange"
      | "getMarketInfo"
      | "marketCount"
      | "rangeBetToken"
      | "calculateXForBin"
      | "getLastClosedMarketId"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "MarketClosed"
      | "MarketCreated"
      | "RewardClaimed"
      | "TokensBought"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "buyTokens",
    values: [BigNumberish, BigNumberish[], BigNumberish[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateBinCost",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimReward",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "collateralToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBinQuantity",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBinQuantitiesInRange",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "marketCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rangeBetToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculateXForBin",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLastClosedMarketId",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "buyTokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculateBinCost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBinQuantity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBinQuantitiesInRange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rangeBetToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateXForBin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastClosedMarketId",
    data: BytesLike
  ): Result;
}

export namespace MarketClosedEvent {
  export type InputTuple = [marketId: BigNumberish, winningBin: BigNumberish];
  export type OutputTuple = [marketId: bigint, winningBin: bigint];
  export interface OutputObject {
    marketId: bigint;
    winningBin: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MarketCreatedEvent {
  export type InputTuple = [
    marketId: BigNumberish,
    tickSpacing: BigNumberish,
    minTick: BigNumberish,
    maxTick: BigNumberish,
    openTimestamp: BigNumberish,
    closeTimestamp: BigNumberish
  ];
  export type OutputTuple = [
    marketId: bigint,
    tickSpacing: bigint,
    minTick: bigint,
    maxTick: bigint,
    openTimestamp: bigint,
    closeTimestamp: bigint
  ];
  export interface OutputObject {
    marketId: bigint;
    tickSpacing: bigint;
    minTick: bigint;
    maxTick: bigint;
    openTimestamp: bigint;
    closeTimestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardClaimedEvent {
  export type InputTuple = [
    marketId: BigNumberish,
    claimer: AddressLike,
    binIndex: BigNumberish,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    marketId: bigint,
    claimer: string,
    binIndex: bigint,
    amount: bigint
  ];
  export interface OutputObject {
    marketId: bigint;
    claimer: string;
    binIndex: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokensBoughtEvent {
  export type InputTuple = [
    marketId: BigNumberish,
    buyer: AddressLike,
    binIndices: BigNumberish[],
    amounts: BigNumberish[],
    totalCost: BigNumberish
  ];
  export type OutputTuple = [
    marketId: bigint,
    buyer: string,
    binIndices: bigint[],
    amounts: bigint[],
    totalCost: bigint
  ];
  export interface OutputObject {
    marketId: bigint;
    buyer: string;
    binIndices: bigint[];
    amounts: bigint[];
    totalCost: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface BetManager extends BaseContract {
  connect(runner?: ContractRunner | null): BetManager;
  waitForDeployment(): Promise<this>;

  interface: BetManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  buyTokens: TypedContractMethod<
    [
      marketId: BigNumberish,
      binIndices: BigNumberish[],
      amounts: BigNumberish[],
      maxCollateral: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  calculateBinCost: TypedContractMethod<
    [marketId: BigNumberish, binIndex: BigNumberish, amount: BigNumberish],
    [bigint],
    "view"
  >;

  claimReward: TypedContractMethod<
    [marketId: BigNumberish, binIndex: BigNumberish],
    [void],
    "nonpayable"
  >;

  collateralToken: TypedContractMethod<[], [string], "view">;

  getBinQuantity: TypedContractMethod<
    [marketId: BigNumberish, binIndex: BigNumberish],
    [bigint],
    "view"
  >;

  getBinQuantitiesInRange: TypedContractMethod<
    [
      marketId: BigNumberish,
      fromBinIndex: BigNumberish,
      toBinIndex: BigNumberish
    ],
    [[bigint[], bigint[]] & { binIndices: bigint[]; quantities: bigint[] }],
    "view"
  >;

  getMarketInfo: TypedContractMethod<
    [marketId: BigNumberish],
    [
      [
        boolean,
        boolean,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        active: boolean;
        closed: boolean;
        tickSpacing: bigint;
        minTick: bigint;
        maxTick: bigint;
        T: bigint;
        collateralBalance: bigint;
        winningBin: bigint;
        openTimestamp: bigint;
        closeTimestamp: bigint;
      }
    ],
    "view"
  >;

  marketCount: TypedContractMethod<[], [bigint], "view">;

  rangeBetToken: TypedContractMethod<[], [string], "view">;

  calculateXForBin: TypedContractMethod<
    [marketId: BigNumberish, binIndex: BigNumberish, cost: BigNumberish],
    [bigint],
    "view"
  >;

  getLastClosedMarketId: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "buyTokens"
  ): TypedContractMethod<
    [
      marketId: BigNumberish,
      binIndices: BigNumberish[],
      amounts: BigNumberish[],
      maxCollateral: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "calculateBinCost"
  ): TypedContractMethod<
    [marketId: BigNumberish, binIndex: BigNumberish, amount: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "claimReward"
  ): TypedContractMethod<
    [marketId: BigNumberish, binIndex: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "collateralToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getBinQuantity"
  ): TypedContractMethod<
    [marketId: BigNumberish, binIndex: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getBinQuantitiesInRange"
  ): TypedContractMethod<
    [
      marketId: BigNumberish,
      fromBinIndex: BigNumberish,
      toBinIndex: BigNumberish
    ],
    [[bigint[], bigint[]] & { binIndices: bigint[]; quantities: bigint[] }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getMarketInfo"
  ): TypedContractMethod<
    [marketId: BigNumberish],
    [
      [
        boolean,
        boolean,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        active: boolean;
        closed: boolean;
        tickSpacing: bigint;
        minTick: bigint;
        maxTick: bigint;
        T: bigint;
        collateralBalance: bigint;
        winningBin: bigint;
        openTimestamp: bigint;
        closeTimestamp: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "marketCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "rangeBetToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "calculateXForBin"
  ): TypedContractMethod<
    [marketId: BigNumberish, binIndex: BigNumberish, cost: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getLastClosedMarketId"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "MarketClosed"
  ): TypedContractEvent<
    MarketClosedEvent.InputTuple,
    MarketClosedEvent.OutputTuple,
    MarketClosedEvent.OutputObject
  >;
  getEvent(
    key: "MarketCreated"
  ): TypedContractEvent<
    MarketCreatedEvent.InputTuple,
    MarketCreatedEvent.OutputTuple,
    MarketCreatedEvent.OutputObject
  >;
  getEvent(
    key: "RewardClaimed"
  ): TypedContractEvent<
    RewardClaimedEvent.InputTuple,
    RewardClaimedEvent.OutputTuple,
    RewardClaimedEvent.OutputObject
  >;
  getEvent(
    key: "TokensBought"
  ): TypedContractEvent<
    TokensBoughtEvent.InputTuple,
    TokensBoughtEvent.OutputTuple,
    TokensBoughtEvent.OutputObject
  >;

  filters: {
    "MarketClosed(uint256,int256)": TypedContractEvent<
      MarketClosedEvent.InputTuple,
      MarketClosedEvent.OutputTuple,
      MarketClosedEvent.OutputObject
    >;
    MarketClosed: TypedContractEvent<
      MarketClosedEvent.InputTuple,
      MarketClosedEvent.OutputTuple,
      MarketClosedEvent.OutputObject
    >;

    "MarketCreated(uint256,uint256,int256,int256,uint256,uint256)": TypedContractEvent<
      MarketCreatedEvent.InputTuple,
      MarketCreatedEvent.OutputTuple,
      MarketCreatedEvent.OutputObject
    >;
    MarketCreated: TypedContractEvent<
      MarketCreatedEvent.InputTuple,
      MarketCreatedEvent.OutputTuple,
      MarketCreatedEvent.OutputObject
    >;

    "RewardClaimed(uint256,address,int256,uint256)": TypedContractEvent<
      RewardClaimedEvent.InputTuple,
      RewardClaimedEvent.OutputTuple,
      RewardClaimedEvent.OutputObject
    >;
    RewardClaimed: TypedContractEvent<
      RewardClaimedEvent.InputTuple,
      RewardClaimedEvent.OutputTuple,
      RewardClaimedEvent.OutputObject
    >;

    "TokensBought(uint256,address,int256[],uint256[],uint256)": TypedContractEvent<
      TokensBoughtEvent.InputTuple,
      TokensBoughtEvent.OutputTuple,
      TokensBoughtEvent.OutputObject
    >;
    TokensBought: TypedContractEvent<
      TokensBoughtEvent.InputTuple,
      TokensBoughtEvent.OutputTuple,
      TokensBoughtEvent.OutputObject
    >;
  };
}
